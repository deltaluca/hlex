HXL syntax:

HXL should describe the tokens of the language with their precedence and attribute functions.

The normal syntax of a token declaration is:
[precedence :] ~/regexp/~ := %{ haxe %}

To 'ignore' tokens you use:
NULL [precedence] : ~/regexp/~

You can also handle un-matched 'errors' with:
err := %{ haxe %}

where 'haxe' is either haXe code or c++ code for the c++ backend which has one special character % referring to the matched string.
for haXe simply treat the %{ %} as a haXe code block with the 'return' value of the token function being the value of the last statement

for example:
~/[0-9]+/~ := %{ tInt(Std.parseInt(%)); %}

The regexp language is a subset of the standard regexp language providing grouping via (), alternation with |, repetition with * and + and optionality with ? together with ranges [] using - and the ^ operator as well as the usual . for any character.

Numerical precedences are optional (defaulting to 0).

Each token function must have a return type of the declared Token type in the compiler options.
