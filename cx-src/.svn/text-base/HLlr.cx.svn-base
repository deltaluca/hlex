package ;


	enum HLX {
		hlx_decl(token:String, prec:Int, regexp:String);
		hlx_ignore(token:String, prec:Int, regexp:String);
		hlx_attr(token:String, attr:String);
		hlx_extra(haxe:String);
	}
	
	class Error {
		public static var err:Bool=false;
		public static var errors = new Array<String>();
	}

class HLlr {
	public static var errors:Array<String>;

	public static function parse(input:Array<Terminal>):Dynamic {
		errors = new Array<String>();

		var _ = aE;
        var actions = [[aR(0),aS(3),_,aS(4),aS(9),_,_,_,_,aS(15),_,aS(21),aG(2),aG(0)],[_,aS(3),_,aS(4),aS(9),_,_,_,_,aS(15),_,aS(21),aG(22),aG(0)],[aR(1),_,_,_,_,_,_,_,_,_,_,_,_,_],[aR(6),aR(6),_,aR(6),aR(6),_,_,_,_,aR(6),_,aR(6),_,_],[_,_,_,_,_,_,_,aS(5),_,_,_,_,_,_],[_,_,aS(6),_,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,_,_,_,aS(7),_,_,_,_,_],[_,_,_,_,_,_,_,_,_,_,aS(8),_,_,_],[aR(2),aR(2),_,aR(2),aR(2),_,_,_,_,aR(2),_,aR(2),_,_],[_,_,_,_,_,aS(10),_,_,_,_,_,_,_,_],[_,_,aS(11),_,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,_,aS(12),_,_,_,_,_,_,_],[_,_,_,_,_,_,_,_,aS(13),_,_,_,_,_],[_,_,_,_,_,_,_,_,_,_,_,aS(14),_,_],[aR(3),aR(3),_,aR(3),aR(3),_,_,_,_,aR(3),_,aR(3),_,_],[_,_,_,aS(16),_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,_,_,aS(17),_,_,_,_,_,_],[_,_,aS(18),_,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,_,_,_,aS(19),_,_,_,_,_],[_,_,_,_,_,_,_,_,_,_,aS(20),_,_,_],[aR(5),aR(5),_,aR(5),aR(5),_,_,_,_,aR(5),_,aR(5),_,_],[aR(4),aR(4),_,aR(4),aR(4),_,_,_,_,aR(4),_,aR(4),_,_],[aA,_,_,_,_,_,_,_,_,_,_,_,_,_]];

        var rules = [{ cb : R0, sym : 12 , cnt : 1 },{ cb : R1, sym : 12 , cnt : 2 },{ cb : R2, sym : 13 , cnt : 5 },{ cb : R3, sym : 13 , cnt : 6 },{ cb : R4, sym : 13 , cnt : 1 },{ cb : R5, sym : 13 , cnt : 6 },{ cb : R6, sym : 13 , cnt : 1 }];

		var entry_state = 1;

var stack = new Array<Int>();
var ret = new Array<Dynamic>();

var cur = input.pop();
var cstate = entry_state;

while(cur!=null) {
	var action = actions[cstate][cur.id];
	//trace(cstate+" "+Std.string(stack)+" # "+Std.string(cur)+" "+Std.string(action)+"  #  "+Std.string(input)+"   ~   "+Std.string(ret));
	
	switch(action) {
		case aS(id):
			ret.push(cur);
			stack.push(cstate);
			cstate = id;
			cur = input.pop();
		case aR(id):
			var c = rules[id];
			c.cb(ret);
			
			if(c.cnt>0) {
				for(i in 0...c.cnt-1) stack.pop();
				cstate = stack[stack.length-1];
			}else stack.push(cstate);
			
			var goto = actions[cstate][c.sym];
			switch(goto) { case aG(id): cstate = id; default: }
		case aA:
			break;
		case aE:
			if(cur != Terminal.ERROR) {
				//if(input.length==0) input.push(Terminal.DOLLAR);
				input.push(cur = Terminal.ERROR);
			} else {
				ret.pop();
				if(stack.length==0) break;
				cstate = stack.pop();
			}
		default:
	}
}

return if(ret.length==0) null else ret[0];	}

	private static inline function R0(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ if(hllr__0==null) [] else [hllr__0]; }));
	}
	private static inline function R1(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ if(hllr__0==null) hllr__1 else [hllr__0].concat(hllr__1); }));
	}
	private static inline function R2(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__4 = ret.pop();
		var hllr__3 = ret.pop();
		var hllr__2 = ret.pop();
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ Error.err = false; hlx_decl(hllr__2.data,hllr__0.data,hllr__4.data); }));
	}
	private static inline function R3(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__5 = ret.pop();
		var hllr__4 = ret.pop();
		var hllr__3 = ret.pop();
		var hllr__2 = ret.pop();
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ Error.err = false; hlx_attr(hllr__2.data,hllr__5.data); }));
	}
	private static inline function R4(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ Error.err = false; hlx_extra(hllr__0.data); }));
	}
	private static inline function R5(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__5 = ret.pop();
		var hllr__4 = ret.pop();
		var hllr__3 = ret.pop();
		var hllr__2 = ret.pop();
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ Error.err = false; hlx_ignore(hllr__3.data,hllr__1.data,hllr__5.data); }));
	}
	private static inline function R6(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({
			if(!Error.err) { Error.errors.push("Unrecognised statement"); Error.err = true; }
			null;
		}));
	}
}

class Terminal {
	public static var ATTR = new Terminal(4);
	public static var COLEQ = new Terminal(8);
	public static var COLON = new Terminal(7);
	public static var DOLLAR = new Terminal(0);
	public static var ERROR = new Terminal(1);
	public static var HAXE = new Terminal(11);
	public static var IDENT = new Terminal(2);
	public static var INT = new Terminal(3);
	public static var LPAR = new Terminal(5);
	public static var NULL = new Terminal(9);
	public static var REGEXP = new Terminal(10);
	public static var RPAR = new Terminal(6);

	public var id:Int;
	public var data:Dynamic;

	public static var cons:Array<Terminal> = null;	public static inline function initcons() {
        if(cons==null) cons = [DOLLAR,ERROR,IDENT,INT,ATTR,LPAR,RPAR,COLON,COLEQ,NULL,REGEXP,HAXE];
	}

	public function new(id:Int) {
		this.id = id;
	}
	public function inst(x:Dynamic) {
		var ret = new Terminal(id);
		ret.data = x;
		return ret;
	}
}

enum Action {
	aE;
	aS(n:Int);
	aR(r:Int);
	aA;
	aG(n:Int);
}