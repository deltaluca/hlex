package ;

	enum Token {
		tIdent(x:String);
		tInt(x:Int);
		tRegExp(x:String);
		tHaxe(x:String);

		tColon; tColEq;
		tNull;
		tError;
	}

	class TokenUtils {
		public static inline function index(x:Token) return Type.enumIndex(x)
	}
class HLex {
	static inline var entry_state:Int = 7;
	static var transitions:Array<Array<Array<Int>>> = null;
	public static function init() {
		if(transitions!=null) return;
		transitions = [];
var cur = [];
cur.push([48,57,22]);
transitions.push(cur);
var cur = [];
cur.push([1,46,1]);
cur.push([48,128,1]);
cur.push([47,47,2]);
transitions.push(cur);
var cur = [];
cur.push([1,46,1]);
cur.push([48,125,1]);
cur.push([127,128,1]);
cur.push([47,47,2]);
cur.push([126,126,23]);
transitions.push(cur);
var cur = [];
cur.push([1,36,3]);
cur.push([38,128,3]);
cur.push([37,37,4]);
transitions.push(cur);
var cur = [];
cur.push([1,36,3]);
cur.push([38,124,3]);
cur.push([126,128,3]);
cur.push([37,37,4]);
cur.push([125,125,24]);
transitions.push(cur);
var cur = [];
cur.push([1,41,5]);
cur.push([43,128,5]);
cur.push([42,42,6]);
transitions.push(cur);
var cur = [];
cur.push([1,41,5]);
cur.push([43,46,5]);
cur.push([48,128,5]);
cur.push([42,42,6]);
cur.push([47,47,11]);
transitions.push(cur);
var cur = [];
cur.push([9,10,13]);
cur.push([13,13,13]);
cur.push([32,32,13]);
cur.push([37,37,10]);
cur.push([43,43,0]);
cur.push([45,45,0]);
cur.push([47,47,8]);
cur.push([48,57,22]);
cur.push([58,58,25]);
cur.push([65,77,14]);
cur.push([79,90,14]);
cur.push([95,95,14]);
cur.push([97,100,14]);
cur.push([102,122,14]);
cur.push([78,78,19]);
cur.push([101,101,17]);
cur.push([126,126,9]);
transitions.push(cur);
var cur = [];
cur.push([42,42,5]);
cur.push([47,47,12]);
transitions.push(cur);
var cur = [];
cur.push([47,47,1]);
transitions.push(cur);
var cur = [];
cur.push([123,123,3]);
transitions.push(cur);
transitions.push(null);
var cur = [];
cur.push([1,9,12]);
cur.push([11,12,12]);
cur.push([14,128,12]);
transitions.push(cur);
transitions.push(null);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,113,14]);
cur.push([115,122,14]);
cur.push([114,114,28]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,113,14]);
cur.push([115,122,14]);
cur.push([114,114,18]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,113,14]);
cur.push([115,122,14]);
cur.push([114,114,16]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,110,14]);
cur.push([112,122,14]);
cur.push([111,111,15]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,84,14]);
cur.push([86,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
cur.push([85,85,21]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,75,14]);
cur.push([77,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
cur.push([76,76,27]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,75,14]);
cur.push([77,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
cur.push([76,76,20]);
transitions.push(cur);
var cur = [];
cur.push([48,57,22]);
transitions.push(cur);
transitions.push(null);
transitions.push(null);
var cur = [];
cur.push([61,61,26]);
transitions.push(cur);
transitions.push(null);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
transitions.push(cur);
var cur = [];
cur.push([48,57,14]);
cur.push([65,90,14]);
cur.push([95,95,14]);
cur.push([97,122,14]);
transitions.push(cur);
}
        static var accepting = [false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	public static function lexify(input:String):Array<Token> {
		init();
var ret = new Array<Token>();
var valid = false;
var valcnt = 0;
var attr = 0;
var errstate = false;
var errstr:String = null;

var state = entry_state;
var pos = 0;
var ipos = pos;

while(pos<input.length) {
	//evaluate next state to progress to.
	var trans = transitions[state];
	var char = input.charCodeAt(pos);

	state = -1;
	if(trans!=null){
		for(range in trans) {
			if(char>=range[0] && char<=range[1]) {
				state = range[2];
				break;
			}
		}
	}

	if(state==-1) {
		//ERROR?
		if(!valid) {
			if(!errstate) {
				if(errstr==null) errstr = input.charAt(ipos);
				else errstr += input.charAt(ipos);
			}else errstr += String.fromCharCode(char);
			pos = ipos + 1;
		}else {
			if(errstr!=null) {
				var tok = errtok(errstr);
				if(tok!=null) ret.push(tok);
				errstr = null;
			}
			var tok = tokenof(attr,input.substr(ipos,valcnt));
			if(tok!=null) ret.push(tok);
			pos = ipos+valcnt;
		}
		errstate = !valid;
		state = entry_state;
		valid = false;
		ipos = pos;
	}else {
		pos++;
		errstate = false;
	}

	if(accepting[state]) {
		valid = true;
		valcnt = pos-ipos;
		attr = state;
	}else if(pos==input.length) {
		if(!valid) {
			if(!errstate) {
				if(errstr==null) errstr = input.charAt(ipos);
				else errstr += input.charAt(ipos);
			}
			var tok = tokenof(attr,input.substr(ipos,valcnt));
			if(tok!=null) ret.push(tok);
			pos = ipos+valcnt;
		}
		errstate = !valid;
		state = entry_state;
		valid = false;
		ipos = pos;
	}
}

if(ipos<input.length) {
	if(!valid) ret.push(errtok(input.substr(ipos)));
	else {
		if(errstr!=null) {
			var tok = errtok(errstr);
			if(tok!=null) ret.push(tok);
			errstr = null;
		}
		var tok = tokenof(attr,input.substr(ipos,valcnt));
		if(tok!=null) ret.push(tok);
		pos = ipos+valcnt;
	}
}

if(errstr!=null) {
	var tok = errtok(errstr);
	if(tok!=null) ret.push(tok);
	errstr = null;
}

return ret;
}
	static inline function errtok(hxl_match:String):Token {
		return null;
	}
	static function tokenof(id:Int, hxl_match:String):Token {
		switch(id) {
			default: return null;
            case 14:
				return ({ tIdent( hxl_match );                       });
            case 15:
				return ({ tIdent( hxl_match );                       });
            case 16:
				return ({ tIdent( hxl_match );                       });
            case 17:
				return ({ tIdent( hxl_match );                       });
            case 18:
				return ({ tIdent( hxl_match );                       });
            case 19:
				return ({ tIdent( hxl_match );                       });
            case 20:
				return ({ tIdent( hxl_match );                       });
            case 21:
				return ({ tIdent( hxl_match );                       });
            case 22:
				return ({ tInt(Std.parseInt( hxl_match ));           });
            case 23:
				return ({ tRegExp( hxl_match .substr(2, hxl_match .length-4)); });
            case 24:
				return ({ tHaxe( hxl_match .substr(2, hxl_match .length-4));   });
            case 25:
				return ({ tColon; });
            case 26:
				return ({ tColEq; });
            case 27:
				return ({ tNull;  });
            case 28:
				return ({ tError; });
        }
	}
}
