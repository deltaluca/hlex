package ;



	import HLex;
	import scx.Match;

	enum HLX {
		hDecl(prec:Int, regexp:String, haxe:String);
		hIgnore(prec:Int, regexp:String);
		hExtra(haxe:String);
		hError(haxe:String);
	}


enum Action {
	aE;
	aS(n:Int);
	aR(r:Int);
	aA;
	aG(n:Int);
}class HLlr {
	public static var errors:Array<String>;

	static var actions:Array<Array<{from:Int,to:Int,act:Action}>>;
	static var rules:Array<{cb:Array<Dynamic>->Void,sym:Int,cnt:Int}>;
	static function init() {
		if(actions!=null) return;
		actions = new Array<Array<{from:Int,to:Int,act:Action}>>();
		var ret = [];
		ret.push({from:0,to:0,act:aR(0)});
		ret.push({from:1,to:1,act:aS(3)});
		ret.push({from:3,to:3,act:aS(26)});
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:5,to:5,act:aS(24)});
		ret.push({from:8,to:8,act:aS(6)});
		ret.push({from:10,to:10,act:aG(2)});
		ret.push({from:11,to:11,act:aG(0)});
		ret.push({from:12,to:12,act:aG(12)});
		ret.push({from:13,to:13,act:aG(13)});
		ret.push({from:14,to:14,act:aG(16)});
		actions.push(ret);
		var ret = [];
		ret.push({from:1,to:1,act:aS(3)});
		ret.push({from:3,to:3,act:aS(26)});
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:5,to:5,act:aS(24)});
		ret.push({from:8,to:8,act:aS(6)});
		ret.push({from:10,to:10,act:aG(27)});
		ret.push({from:11,to:11,act:aG(0)});
		ret.push({from:12,to:12,act:aG(12)});
		ret.push({from:13,to:13,act:aG(13)});
		ret.push({from:14,to:14,act:aG(16)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:0,act:aR(1)});
		actions.push(ret);
		var ret = [];
		ret.push({from:7,to:7,act:aS(4)});
		actions.push(ret);
		var ret = [];
		ret.push({from:5,to:5,act:aS(24)});
		ret.push({from:12,to:12,act:aG(5)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(2)});
		ret.push({from:3,to:5,act:aR(2)});
		ret.push({from:8,to:8,act:aR(2)});
		actions.push(ret);
		var ret = [];
		ret.push({from:3,to:3,act:aS(26)});
		ret.push({from:6,to:6,act:aS(7)});
		ret.push({from:14,to:14,act:aG(9)});
		actions.push(ret);
		var ret = [];
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:13,to:13,act:aG(8)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(3)});
		ret.push({from:3,to:5,act:aR(3)});
		ret.push({from:8,to:8,act:aR(3)});
		actions.push(ret);
		var ret = [];
		ret.push({from:6,to:6,act:aS(10)});
		actions.push(ret);
		var ret = [];
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:13,to:13,act:aG(11)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(4)});
		ret.push({from:3,to:5,act:aR(4)});
		ret.push({from:8,to:8,act:aR(4)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(8)});
		ret.push({from:3,to:5,act:aR(8)});
		ret.push({from:8,to:8,act:aR(8)});
		actions.push(ret);
		var ret = [];
		ret.push({from:7,to:7,act:aS(14)});
		actions.push(ret);
		var ret = [];
		ret.push({from:5,to:5,act:aS(24)});
		ret.push({from:12,to:12,act:aG(15)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(7)});
		ret.push({from:3,to:5,act:aR(7)});
		ret.push({from:8,to:8,act:aR(7)});
		actions.push(ret);
		var ret = [];
		ret.push({from:6,to:6,act:aS(17)});
		ret.push({from:8,to:8,act:aS(21)});
		actions.push(ret);
		var ret = [];
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:13,to:13,act:aG(18)});
		actions.push(ret);
		var ret = [];
		ret.push({from:7,to:7,act:aS(19)});
		actions.push(ret);
		var ret = [];
		ret.push({from:5,to:5,act:aS(24)});
		ret.push({from:12,to:12,act:aG(20)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(6)});
		ret.push({from:3,to:5,act:aR(6)});
		ret.push({from:8,to:8,act:aR(6)});
		actions.push(ret);
		var ret = [];
		ret.push({from:6,to:6,act:aS(22)});
		actions.push(ret);
		var ret = [];
		ret.push({from:4,to:4,act:aS(25)});
		ret.push({from:13,to:13,act:aG(23)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(5)});
		ret.push({from:3,to:5,act:aR(5)});
		ret.push({from:8,to:8,act:aR(5)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(12)});
		ret.push({from:3,to:5,act:aR(12)});
		ret.push({from:8,to:8,act:aR(12)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:1,act:aR(11)});
		ret.push({from:3,to:5,act:aR(11)});
		ret.push({from:7,to:8,act:aR(11)});
		actions.push(ret);
		var ret = [];
		ret.push({from:6,to:6,act:aR(10)});
		ret.push({from:8,to:8,act:aR(10)});
		actions.push(ret);
		var ret = [];
		ret.push({from:0,to:0,act:aA});
		actions.push(ret);

		rules = new Array<{cb:Array<Dynamic>->Void,sym:Int,cnt:Int}>();
		rules.push({cb:R0, sym:10, cnt:1});
		rules.push({cb:R1, sym:10, cnt:2});
		rules.push({cb:R2, sym:11, cnt:3});
		rules.push({cb:R3, sym:11, cnt:3});
		rules.push({cb:R4, sym:11, cnt:4});
		rules.push({cb:R5, sym:11, cnt:4});
		rules.push({cb:R6, sym:11, cnt:5});
		rules.push({cb:R7, sym:11, cnt:3});
		rules.push({cb:R8, sym:11, cnt:1});
		rules.push({cb:R9, sym:15, cnt:1});
		rules.push({cb:R10, sym:14, cnt:1});
		rules.push({cb:R11, sym:13, cnt:1});
		rules.push({cb:R12, sym:12, cnt:1});
	}
	static function getaction(cstate:Int,ind:Int) {
		var acts = actions[cstate];
		if(acts==null) return aE;

		for(x in acts) {
			if(x.from <= ind && ind <= x.to) return x.act;
			else if(x.from > ind) return aE;
		}
		return aE;
	}

	public static function parse(input:Array<Token>): Array<HLX>  {
		init();

		errors = new Array<String>();
		var entry_state = 1;
var stack = new Array<Int>();
var ret = new Array<Dynamic>();
input.push(null);
var cur = input.shift();
var cstate = entry_state;
while(true){
	var action = getaction(cstate,cur==null ? 0 : TokenUtils.index(cur)+2);
	switch(action) {
		case aS(id):
			ret.push(cur);
			stack.push(cstate);
			cstate = id;
			cur = input.shift();
		case aR(id):
			var c = rules[id];
			c.cb(ret);
			if(c.cnt>0) {
				for(i in 0...c.cnt-1) stack.pop();
				cstate = stack[stack.length-1];
			}else stack.push(cstate);
			var goto = getaction(cstate,c.sym);
			switch(goto) { case aG(id): cstate = id; default: }
		case aA:
			break;
		case aE:
			throw "yeeeeh, cba with errors";
		default:
	}
}
return if(ret.length==0) null else ret[0];
	}

	private static inline function R0(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0: HLX  = ret.pop();
		var retret: Array<HLX>  = ({ [hllr__0]; });
		ret.push(retret);
	}
	private static inline function R1(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__1: Array<HLX>  = ret.pop();
var hllr__0: HLX  = ret.pop();
		var retret: Array<HLX>  = ({ hllr__1.unshift(hllr__0); hllr__1; });
		ret.push(retret);
	}
	private static inline function R2(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__2: String  = ret.pop();
var hllr__1:Token = ret.pop();
var hllr__0:Token = ret.pop();
		var retret: HLX  = ({ hError(hllr__2); });
		ret.push(retret);
	}
	private static inline function R3(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__2: String  = ret.pop();
var hllr__1:Token = ret.pop();
var hllr__0:Token = ret.pop();
		var retret: HLX  = ({ hIgnore(0, hllr__2); });
		ret.push(retret);
	}
	private static inline function R4(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__3: String  = ret.pop();
var hllr__2:Token = ret.pop();
var hllr__1: Int     = ret.pop();
var hllr__0:Token = ret.pop();
		var retret: HLX  = ({ hIgnore(hllr__1,hllr__3); });
		ret.push(retret);
	}
	private static inline function R5(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__3: String  = ret.pop();
var hllr__2:Token = ret.pop();
var hllr__1:Token = ret.pop();
var hllr__0: Int     = ret.pop();
		var retret: HLX  = ({ hIgnore(hllr__0,hllr__3); });
		ret.push(retret);
	}
	private static inline function R6(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__4: String  = ret.pop();
var hllr__3:Token = ret.pop();
var hllr__2: String  = ret.pop();
var hllr__1:Token = ret.pop();
var hllr__0: Int     = ret.pop();
		var retret: HLX  = ({ hDecl(hllr__0,hllr__2,hllr__4); });
		ret.push(retret);
	}
	private static inline function R7(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__2: String  = ret.pop();
var hllr__1:Token = ret.pop();
var hllr__0: String  = ret.pop();
		var retret: HLX  = ({ hDecl(0, hllr__0,hllr__2); });
		ret.push(retret);
	}
	private static inline function R8(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0: String  = ret.pop();
		var retret: HLX  = ({ hExtra(hllr__0); });
		ret.push(retret);
	}
	private static inline function R9(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0:Token = ret.pop();
		var retret: String  = ({ Match.match(hllr__0, tIdent (x)=x); });
		ret.push(retret);
	}
	private static inline function R10(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0:Token = ret.pop();
		var retret: Int     = ({ Match.match(hllr__0, tInt   (x)=x); });
		ret.push(retret);
	}
	private static inline function R11(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0:Token = ret.pop();
		var retret: String  = ({ Match.match(hllr__0, tRegExp(x)=x); });
		ret.push(retret);
	}
	private static inline function R12(ret:Array<Dynamic>) {
		//assign arguments.
var hllr__0:Token = ret.pop();
		var retret: String  = ({ Match.match(hllr__0, tHaxe  (x)=x); });
		ret.push(retret);
	}
}
