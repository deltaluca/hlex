%{
	enum Token {
		tIdent(x:String);
		tInt(x:Int);
		tRegExp(x:String);
		tHaxe(x:String);

		tColon; tColEq;
		tNull;
		tError;
	}

	class TokenUtils {
		public static inline function index(x:Token) return Type.enumIndex(x)
	}
%}

NULL 2 : ~/(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)/~
NULL 2 : ~/[ \t\n\r]/~

1 : ~/[a-zA-Z_][a-zA-Z_0-9]*/~ := %{ tIdent(%);                       %}
1 : ~/[+\-]?[0-9]+/~           := %{ tInt(Std.parseInt(%));           %}
0 : ~/~/([^/]|/+[^~/])*/+~/~   := %{ tRegExp(%.substr(2,%.length-4)); %}
2 : ~/%\{([^%]|%+[^%}])*%+\}/~ := %{ tHaxe(%.substr(2,%.length-4));   %}

2 : ~/:/~    := %{ tColon; %}
2 : ~/:=/~   := %{ tColEq; %}
2 : ~/NULL/~ := %{ tNull;  %}
2 : ~/error/~:= %{ tError; %}
