%token IDENT INT REGEXP HAXE
%token COLON COLEQ
%token NULL ERR

%{
	import HLex;
	import scx.Match;

	enum HLX {
		hDecl(prec:Int, regexp:String, haxe:String);
		hIgnore(prec:Int, regexp:String);
		hExtra(haxe:String);
		hError(haxe:String);
	}
%}

%entry hlx

%hlx %{ Array<HLX> %}
	: state		%{ [%0]; %}
	| state hlx %{ %1.unshift(%0); %1; %}
;

%state %{ HLX %}
	// hError
	: ERR COLEQ haxe %{ hError(%2); %}

	// hIgnore
	| NULL     COLON regexp %{ hIgnore(0, %2); %}
	| NULL int COLON regexp %{ hIgnore(%1,%3); %}
	| int NULL COLON regexp %{ hIgnore(%0,%3); %}

	// hDecl
	| int COLON regexp COLEQ haxe %{ hDecl(%0,%2,%4); %}
	| 			regexp COLEQ haxe %{ hDecl(0, %0,%2); %}
	| int COLON regexp 			  %{ hDecl(%0,%2,""); %}
	|           regexp            %{ hDecl(0, %0,""); %}

	// hExtra
	| haxe %{ hExtra(%0); %}
;

%ident  %{ String %} : IDENT  %{ Match.match(%0, tIdent (x)=x); %} ;
%int    %{ Int    %} : INT    %{ Match.match(%0, tInt   (x)=x); %} ;
%regexp %{ String %} : REGEXP %{ Match.match(%0, tRegExp(x)=x); %} ;
%haxe   %{ String %} : HAXE   %{ Match.match(%0, tHaxe  (x)=x); %} ;
